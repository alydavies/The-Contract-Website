# Generated by Django 3.2.20 on 2024-02-02 16:36

from django.db import migrations, models

EXP_NEW_CHAR = 150
NOT_PORTED = "NOT_PORTED"
SEASONED_PORTED = "SEASONED_PORTED"
VETERAN_PORTED = "VETERAN_PORTED"
PORTED_EXP_ADJUSTMENT = {
    NOT_PORTED: 0,
    SEASONED_PORTED: 100,
    VETERAN_PORTED: 200,
}

EXP_MVP = "MVP"
EXP_LOSS_V1 = "LOSS_V1"
EXP_LOSS_RINGER_V1 = "LOSS_RINGER_V1"
EXP_WIN_V1 = "WIN_V1"
EXP_WIN_RINGER_V1 = "WIN_RINGER_V1"
EXP_LOSS_V2 = "LOSS_V2"
EXP_LOSS_IN_WORLD_V2 = "LOSS_IN_WORLD_V2"
EXP_LOSS_RINGER_V2 = "LOSS_RINGER_V2"
EXP_WIN_V2 = "WIN_V2"
EXP_WIN_IN_WORLD_V2 = "WIN_IN_WORLD_V2"
EXP_WIN_RINGER_V2 = "WIN_RINGER_V2"
EXP_GM = "GM"
EXP_GM_RATIO = "GM_GOLDEN_RATIO"
EXP_GM_NEW_PLAYER = "GM_NEW_PLAYER"
EXP_GM_MOVE = "GM_MOVE"
EXP_JOURNAL = "JOURNAL"
EXP_CUSTOM = "CUSTOM"
EXP_EXCHANGE = "Exchange"
EXP_QUESTIONNAIRE_CONTRACT = "Questionnaire_contract"
EXP_QUESTIONNAIRE_INITIAL = "Questionnaire_initial"
EXP_QUESTIONNAIRE_PRE_CONTRACT = "Questionnaire_pre_contract"
EXP_REWARD_VALUES = {
    EXP_MVP: 2,
    EXP_LOSS_V1: 2,
    EXP_LOSS_RINGER_V1: 2,
    EXP_WIN_V1: 4,
    EXP_WIN_RINGER_V1: 4,
    EXP_LOSS_V2: 1,
    EXP_LOSS_IN_WORLD_V2: 3,
    EXP_LOSS_RINGER_V2: 1,
    EXP_WIN_V2: 3,
    EXP_WIN_IN_WORLD_V2: 5,
    EXP_WIN_RINGER_V2: 3,
    EXP_GM: 6,
    EXP_GM_RATIO: 6,
    EXP_GM_NEW_PLAYER: 6,
    EXP_GM_MOVE: 2,
    EXP_JOURNAL: 1,
    EXP_EXCHANGE: 6,
    EXP_QUESTIONNAIRE_CONTRACT: 2,
    EXP_QUESTIONNAIRE_INITIAL: 6,
    EXP_QUESTIONNAIRE_PRE_CONTRACT: 1,
}

def reverse_migrate_earned_exp(apps, schema_editor):
    pass


def migrate_update_earned_exp(apps, schema_editor):
    Character = apps.get_model('characters', 'Character')
    for character in Character.objects.all():
        rewards = character.experiencereward_set.filter(is_void=False).all()
        total_exp = EXP_NEW_CHAR
        for reward in rewards:
            total_exp = total_exp + get_value(reward)
        character.earned_exp = int(total_exp) + PORTED_EXP_ADJUSTMENT[character.ported]
        character.save()
        if character.ported == NOT_PORTED and character.earned_exp > (EXP_NEW_CHAR + 16 + (character.num_games * 12)):
            overage = character.earned_exp - (EXP_NEW_CHAR + 16 + (character.num_games * 12))
            print("refunding bonus exp for ", character.name, "overage: ", overage)
            for reward in rewards:
                if overage <= 0:
                    break
                if reward.type in [EXP_GM, EXP_EXCHANGE, EXP_GM_RATIO, EXP_GM_NEW_PLAYER, EXP_GM_MOVE]:
                    print("refunding")
                    reward.rewarded_character = None
                    reward.save()
                    overage -= get_value(reward)
            character.refresh_from_db()
            rewards = character.experiencereward_set.filter(is_void=False).all()
            total_exp = EXP_NEW_CHAR
            for reward in rewards:
                total_exp = total_exp + get_value(reward)
            character.earned_exp = int(total_exp) + PORTED_EXP_ADJUSTMENT[character.ported]
            character.save()
            print("refunded to overage: ", overage)

    print("Done")


def get_value(reward):
    if reward.is_void:
        return 0
    if hasattr(reward, 'custom_value') and reward.custom_value:
        return reward.custom_value
    if reward.type == EXP_CUSTOM:
        return 0
    return EXP_REWARD_VALUES[reward.type]


class Migration(migrations.Migration):

    dependencies = [
        ('characters', '0106_character_earned_exp'),
    ]

    operations = [
        migrations.RunPython(migrate_update_earned_exp, reverse_migrate_earned_exp),
    ]
